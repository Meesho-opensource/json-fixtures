package ie.corballis.fixtures.io.write;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Joiner;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Map;
import java.util.regex.Matcher;

import static com.google.common.collect.Lists.newArrayList;
import static ie.corballis.fixtures.util.ClassUtils.getTestClass;

public class SnapshotGenerator extends AbstractFixtureWriter {

    public static final String AUTO_GENERATED_FOR = "_AUTO_GENERATED_FOR_";

    public SnapshotGenerator(ObjectMapper objectMapper) {
        super(objectMapper);
    }

    public File write(Class testClass, String fixtureName, Object contents) throws IOException {
        try {
            String fixtureFileName = testClass.getSimpleName();
            String fixtureFileFolder = getFixtureFileFolder(testClass);
            return write(fixtureFileFolder,
                         fixtureFileName,
                         fixtureName,
                         contents,
                         TestClassFileNamingStrategy.getInstance(),
                         (contentMap) -> appendAutoGeneratedFor(testClass, contentMap));
        } catch (Exception e) {
            throw new IOException(e);
        }
    }

    private Object appendAutoGeneratedFor(Class testClass, Map<String, Object> contentMap) {
        return contentMap.put(AUTO_GENERATED_FOR, testClass.getName());
    }

    private String getFixtureFileFolder(Class testClass) throws URISyntaxException {
        URL fileUrl = getTestClass().getProtectionDomain().getCodeSource().getLocation();
        File file = new File(fileUrl.toURI());
        String projectRoot = file.getParentFile().getParent();
        String folderOfClass =
            testClass.getPackage().getName().replaceAll("\\.", Matcher.quoteReplacement(File.separator));
        return Joiner.on(File.separator).join(newArrayList(projectRoot, "src", "test", "java", folderOfClass));
    }
}
